
Minesweeper 
 
 
 
 
  
   
 Have you ever played Minesweeper? This cute little game comes with a certain operating system whose name we can't remember. The goal of the game is to find where all the mines are located within a  M x N field. 
The game shows a number in a square which tells you how many mines there are adjacent to that square. Each square has at most eight adjacent squares. The  4 x 4 field on the left contains two mines, each represented by a ``*'' character. If we represent the same field by the hint numbers described above, we end up with the field on the right: 





*...
....
.*..
....

 



*100
2210
1*10
1110

 





 Input 

The input will consist of an arbitrary number of fields. The first line of each field contains two integers n and m ( 0 < n, m$ \le$100) which stand for the number of lines and columns of the field, respectively. Each of the next n lines contains exactly m characters, representing the field. 

Safe squares are denoted by ``.'' and mine squares by ``*,'' both without the quotes. The first field line where n = m = 0 represents the end of input and should not be processed. 



 Output 

For each field, print the message Field #x:  on a line alone, where x stands for the number of the field starting from 1. The next n lines should contain the field with the ``.'' characters replaced by the number of mines adjacent to that square. There must be an empty line between field outputs. 





 Sample Input 


4 4
*...
....
.*..
....
3 5
**...
.....
.*...
0 0






 Sample Output 


Field #1:
*100
2210
1*10
1110

Field #2:
**100
33200
1*100

/**
  * PC/UVa 110102/101189
  * 扫雷
  * author：songyan
  * date: 2016-04-30
*/

// inclue head file
#include<iostream>

using namespace std; // 标准空间

#define MAX_NUM 100
// claiming function
/**
 * count bumb number
 * int [][] data array
 * int current row
 * int current col
 * int array ros
 * int array col
*/
int countBumb(char[MAX_NUM][MAX_NUM],int,int,int,int);
/**
 * main function
*/
int main()
{
  /**
   * 1、定义两个int型变量n 、m
   * 2、定义两个char型数组data、result
   * 3、输入变量，并判断n=m=0？
   * 4、遍历data数组，判断边界，依次为result数组赋值
   * 5、输出结果，并继续程序
   */
   int n,m;
   int cnt  = 0; // count compute number
   while(cin>>n>>m) // 输入m n
    {
      // Jude the condition n = m = 0?
      if(n == 0 && m == 0)
        break;// stop the program
      if(cnt != 0)
        cout<<endl;// print /n
      cnt ++ ;// add cnt one
      // define two char array
      char data[MAX_NUM][MAX_NUM];
      char result[MAX_NUM][MAX_NUM];
      // input number to data array
      for(int i = 0;i < n;i ++)
      {
        for(int j = 0;j < m;j ++)
        {
          cin>>data[i][j];
        } // end for j
      } // end for i

      // deal the data and result array
      for(int i = 0;i < n;i ++)
      {
        for(int j = 0;j < m;j ++)
        {
          // if data[i][j] = '*'，then result[i][j] = '*'
          if(data[i][j] == '*')
          {
            result[i][j] = '*';
          }else{ // data[i][j] = '.'
            result[i][j] = (char)countBumb(data,i,j,n,m) + '0'; // count bumb number
          } // end if else
        } // end for j
      } // end for i

      // print the result
      cout<<"Field #"<<cnt<<":"<<endl;
      for(int i = 0 ;i < n;i ++)
      {
        for(int j = 0;j < m;j ++)
        {
          cout<<result[i][j]; // print result char
        } // end for j
        cout<<endl; // print /n
    }// end for i
    }// end while

   return 0;
} // end main function

/**
 * count bumb number
*/
int countBumb(char data[MAX_NUM][MAX_NUM] ,int i,int j,int n,int m)
{
  /**
   * 依次判断当前位置周围的是否为地雷
   * 最后统计cnt并返回
  */
  int cnt = 0;
  if(i - 1 >= 0 && j - 1 >= 0) // 左上角
  {
    if(data[i - 1][j - 1] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }
  if(i - 1 >= 0) // 上方
  {
    if(data[i - 1][j] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }
  if(i - 1 >= 0 && j + 1 < m) // 右上角
  {
    if(data[i - 1][j + 1] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }
  if(j - 1 >= 0) // 左边
  {
    if(data[i][j - 1] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }
  if(j + 1 < m) // 右边
  {
    if(data[i][j + 1] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }
  if(i + 1 < n && j - 1 >= 0) // 左下角
  {
    if(data[i + 1][j - 1] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }
  if(i + 1 < n) // 下边
  {
    if(data[i+1][j] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }
  if(i + 1 < n && j + 1 < m) // 右下角
  {
    if(data[i + 1][j + 1] == '*') // find bumb ,cnt + 1
    {
      cnt++;
    }
  }

  return cnt;
} // end countBumb function





