
The 3n + 1 problem 
 
 
 
 
  
   

Consider the following algorithm to generate a sequence of numbers. Start with an integer n. If n is even, divide by 2. If n is odd, multiply by 3 and add 1. Repeat this process with the new value of n, terminating when n = 1. For example, the following sequence of numbers will be generated for n = 22: 

22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 
 It is conjectured (but not yet proven) that this algorithm will terminate at n = 1 for every integer n. Still, the conjecture holds for all integers up to at least 1, 000, 000. 
For an input n, the cycle-length of n is the number of numbers generated up to and including the 1. In the example above, the cycle length of 22 is 16. Given any two numbers i and j, you are to determine the maximum cycle length over all numbers between i and j, including both endpoints. 



 Input 
The input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0. 


 Output 
For each pair of input integers i and j, output i, j in the same order in which they appeared in the input and then the maximum cycle length for integers between and including i and j. These three numbers should be separated by one space, with all three numbers on one line and with one line of output for each line of input. 




 Sample Input 
1 10
100 200
201 210
900 1000






 Sample Output 
1 10 20
100 200 125
201 210 89
900 1000 174


// ===============引进头文件===========
#include <iostream>

using namespace std;

//=============宏定义==================
#define min(a, b) ((a) <= (b) ? (a) : (b))
#define max(a, b) ((a) >= (b) ? (a) : (b))


//============循环数计算函数===========
int counter(long long i)
{
    int cnt = 1; //计数器

    while(i != 1) // 循环条件不为壹
    {
      if(i & 1 ) // 与计算 替换求余计算 ，为奇数时
      {
        i += (i << 1) + 1;  // 位移计算 代替 乘法 ，3n + 1
      }
      else // 为偶数
      {
        i >>= 1;
      }

      cnt ++ ; // 计算器加壹

    }
    return  cnt;
}
int main()
{

  int first,second,start, endd ,tmpt, max_result; // 区间两端 、临时值、最大值
  while(cin>>first>>second) // 循环输入数据，并进行处理
  {
    start = min(first,second);  // 最小值
    endd = max(first, second);  // 最大值

    // 寻找最大值 结果
    max_result = 0; // 初始化最大值
    for(int i = start;i <= endd; i ++)
    {
      tmpt = counter(i);// 计算最大值

      if(max_result < tmpt) // 找到一个更大值
      {
        max_result = tmpt; // 赋值
      }
    } // end for

    cout<<first<<" "<<second<<" "<<max_result<<endl; // 输出结果
  } // end while
  return 0;
}
